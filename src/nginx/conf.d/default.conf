# 1M creates 1Mb zone. Somewhat overkill for our usecase but it's fine
js_shared_dict_zone zone=apk:1M timeout=60s;

# Since the API is on a separate domain (api.localhost), we need to allow CORS from domains domains that match the following Regex
# (any request that originates from our domain)
map $http_origin $allow_origin {
    ~^http://(.*\.)?localhost(:80)?$ $http_origin;
    default "";
}

server {
    js_path "/etc/nginx/njs/";
    js_import set_public_keys.js;

    listen 80; # Assigns the port that the proxy will listen on (http://localhost:port)
    listen [::]:80;
    server_name localhost; # Assigns the name of the server (localhost in this case, it could be anything though if we configured the DNS)

    # Route for all webserver files
    location / {
        try_files false @webserver;
    }

    # This allows the client to get static files (css, js, html, etc.) from the proxy (so that the proxy doesn't have to make a request to each service to get the files)
    # FIXME: Don't really need this since now the only route on this server goes to the webserver
    location /static/ {
        try_files $uri @webserver;
    }

    location @webserver {
        resolver 127.0.0.11 valid=10s;
        set $webserver webserver:3000;
        proxy_pass http://$webserver;
    }

    # Automatically call this/these function periodically
    location @periodics {
        resolver 127.0.0.11;
        js_periodic set_public_keys.setPublicKeys interval=5s; # Change this to send public key to webserver more/less frequently
    }
}

# API host
server {
    listen 80;
    listen [::]:80;
    server_name api.localhost;

    add_header "Access-Control-Allow-Origin" $allow_origin;
    add_header Vary Origin;

    # Access at api.localhost/signin
    location /register {
        try_files false @account;
    }
    
    location /signin {
        try_files false @account;
    }

    location @account {
        resolver 127.0.0.11 valid=10s;
        set $account_server account_server:3000;
        proxy_pass http://$account_server;
    }

    # FIXME: Allow cookies to be sent across subdomains (I think localhost isn't a valid domain
    # so the base domain needs to be xxx.localhost and the api needs to be api.xxx.localhost)
    # location /signout {
    #     try_files false @webserver;
    # }

    # location @webserver {
    #     resolver 127.0.0.11 valid=10s;
    #     set $webserver webserver:3000;
    #     proxy_pass http://$webserver;
    # }

    location /categories {
        try_files false @inventory;
    }

    location @inventory {
        resolver 127.0.0.11 valid=10s;
        set $inventory_server inventory_server:3000;
        proxy_pass http://$inventory_server;
    }
}